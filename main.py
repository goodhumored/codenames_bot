from config import images_dir, help_text
from credentials import token, group_id
from vk_facade import Api, Bot, Keyboard, Message
from game_management import Game, get_manager, get_dicts_list, get_random_words, Field
from log import get_logger
from random import shuffle
from PIL import Image
from json import loads
from cv2 import imread, imshow, waitKey, destroyAllWindows
from command_processor import process

api = Api(token)
bot = Bot(api, group_id)
gm = get_manager()
log = get_logger()
dicts = get_dicts_list()

while True:
	upds = bot.get_updates()
	for upd in upds:
		if upd['type'] == 'message_new':
			msg = upd['object']['message']
			pid = msg['peer_id']
			uid = msg['from_id']
			text = msg['text'].lower()
			if pid > 2000000000:
				game = gm.find_by_pid(pid)

			com, grs = process(text)
			if com is None:
				continue
			match(com):
				case 'start':
					if pid < 2000000000:
						bot.send_message(pid, Message('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞—Ö–æ–¥—è—Å—å –≤ –±–µ—Å–µ–¥–µ'))
						continue
					if game is not None and game.status != 'over':
						kb = Keyboard().from_list([
							[['–î–∞', 'start', 'secondary'], ['–ù–µ—Ç', 'cancel', 'secondary']]
						])
						bot.send_message(pid, Message('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ?', kb))
					else:
						kb = Keyboard().from_list([
							[['–î–∞', 'start', 'positive'], ['–ù–µ—Ç', 'cancel', 'negative']]
						])
						bot.send_message(pid, Message('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –∫–æ–¥–æ–≤—ã–µ –∏–º–µ–Ω–∞?', kb))
				case 'help':
					bot.send_message(pid, Message(help_text))
				case 'info':
					if pid < 2000000000:
						bot.send_message(pid, Message('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞—Ö–æ–¥—è—Å—å –≤ –±–µ—Å–µ–¥–µ'))
						continue
					bot.send_info(game)
				case 'hint':
					if pid < 2000000000:
						bot.send_message(pid, Message(
							'–ß—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç—Å—é–¥–∞, –ø–∏—à–∏—Ç–µ:\n'
							'[id_–±–µ—Å–µ–¥—ã] [–°–ª–æ–≤–æ] [–∫–æ–ª-–≤–æ]'))
						continue
					if game.status != 'progress':
						bot.send_message(pid, Message('–ò–≥—Ä–∞ –Ω–µ –∏–¥—ë—Ç'))
						continue
					cap = game.red_cap if game.turn == 'red' else game.blue_cap
					if uid not in [game.red_cap, game.blue_cap]:
						bot.send_message(pid, Message('–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω—ã –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏'))
						continue
					if uid == cap and game.hint_c > 0:
						bot.send_message(pid, Message('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞ —Ö–æ–¥'))
						continue
					if uid != cap:
						game.turn = 'blue' if game.turn == 'red' else 'red'
					info_msg = bot.msg_from_id(game.mid, pid)
					info_msg.set_text(
						'–•–æ–¥: ' + ('—Å–∏–Ω–∏–µ' if (game.turn == 'blue') else '–∫—Ä–∞—Å–Ω—ã–µ') +
						'. –°—á—ë—Ç: üî¥' + str(game.red_score) + ' : ' + str(game.blue_score) + 'üîµ\n' +
						''.join(info_msg.get_text().splitlines(True)[1:]) + '\n' +
						('üî¥' if game.turn == 'red' else 'üîµ') + f'{grs[0]} {grs[1]}: '
					)
					game.hint_c = int(grs[1]) + 1
					bot.send_info(game)
					bot.commit_edits(info_msg)
				case 'word':
					if game.status != 'progress':
						continue
					r, c = game.pl_f.index_of(grs[0])
					if r >= 0 and c >= 0:
						if uid != game.red_cap and uid != game.blue_cap:
							if game.hint_c == 0:
								bot.send_message(pid, Message('–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å, –∂–¥—ë–º –Ω–æ–≤—É—é –∏–∑ —Ü–µ–Ω—Ç—Ä–∞!'))
								continue
							color = game.cap_f.get_color(r, c)
							if game.pl_f.get_color(r, c) == color:
								bot.send_message(pid, Message('–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –Ω–∞–∂–∏–º–∞–ª–∏'))
								continue
							game.hint_c -= 1
							if color == 'black':
								game.status = 'over'
								img = bot.upload_photo(images_dir + str(pid) + '.jpg')
								photo = f'photo{img["owner_id"]}_{img["id"]}'
								bot.send_message(pid, Message('–ë—ã–ª –Ω–∞–∂–∞—Ç —á—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç, –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –ø–æ–±–µ–¥–∏–ª–∏ ' + ('–∫—Ä–∞—Å–Ω—ã–µ' if color == 'blue' else '—Å–∏–Ω–∏–µ'), atts=photo))

							if color != game.turn:
								game.hint_c = 0
								if color != 'black':
									bot.send_message(pid, Message('–ù–µ–≤–µ—Ä–Ω–æ, —Å–º–µ–Ω–∞ —Ö–æ–¥–∞'))

							if game.hint_c == 0:
								game.turn = 'red' if game.turn == 'blue' else 'blue'
								if game.status != 'over':
									bot.send_message(pid, Message(
										'–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —Ç–µ–ø–µ—Ä—å —Ö–æ–¥ ' +
										('—Å–∏–Ω–∏—Ö' if (game.turn == 'blue') else '–∫—Ä–∞—Å–Ω—ã—Ö')
									))
								if game.turn == 'blue':
									bot.send_message(game.blue_cap, Message('–°–µ–π—á–∞—Å –≤–∞—à —Ö–æ–¥'))
								else:
									bot.send_message(game.red_cap, Message('–°–µ–π—á–∞—Å –≤–∞—à —Ö–æ–¥'))

							if color == 'red':
								s = 'üî¥'
								game.red_score -= 1
								if game.red_score == 0:
									game.status = 'over'
									img = bot.upload_photo(images_dir + str(pid) + '.jpg')
									photo = f'photo{img["owner_id"]}_{img["id"]}'
									bot.send_message(pid, Message('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã, –ø–æ–±–µ–¥–∞ –∫—Ä–∞—Å–Ω—ã—Ö!', atts=photo))
							elif color == 'blue':
								s = 'üîµ'
								game.blue_score -= 1
								if game.blue_score == 0:
									game.status = 'over'
									img = bot.upload_photo(images_dir + str(pid) + '.jpg')
									photo = f'photo{img["owner_id"]}_{img["id"]}'
									bot.send_message(pid, Message('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã, –ø–æ–±–µ–¥–∞ —Å–∏–Ω–∏—Ö!', atts=photo))
							elif color == 'black':
								s = '‚ö´'
							elif color == 'white':
								s = '‚ö™'
							elif color == 'yellow':
								s = 'üü°'
							game.pl_f.set_color(r, c, color)
							game.cap_f.set_color(r, c, 'white')

							photo = bot.upload_photo(game.pl_f.get_img(str(pid)+'_pl'))
							photo = f'photo{photo["owner_id"]}_{photo["id"]}'
							photo1 = bot.upload_photo(game.cap_f.get_img(str(pid) + '_cap'))
							photo1 = f'photo{photo1["owner_id"]}_{photo1["id"]}'

							info_msg = bot.msg_from_id(game.mid, pid)
							radm_msg = bot.msg_from_id(game.rmid, game.red_cap)
							badm_msg = bot.msg_from_id(game.bmid, game.blue_cap)
							info_msg.set_atts(photo)
							radm_msg.set_atts(photo1)
							badm_msg.set_atts(photo1)
							info_msg.set_text(
								'–•–æ–¥: ' + ('—Å–∏–Ω–∏–µ' if (game.turn == 'blue') else '–∫—Ä–∞—Å–Ω—ã–µ') +
								'. –°—á—ë—Ç: üî¥' + str(game.red_score) + ' : ' + str(game.blue_score) + 'üîµ\n' +
								''.join(info_msg.get_text().splitlines(True)[1:]) + ' ' + s + grs[0]
							)
							bot.commit_edits(info_msg)
							bot.commit_edits(radm_msg)
							bot.commit_edits(badm_msg)
				case 'im_hint':
					game = gm.find_by_gid(grs[0])
					if game is None:
						bot.send_message(pid, Message('–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞'))
						continue
					if game.status != 'progress':
						bot.send_message(pid, Message('–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å'))
						continue
					pid = game.pid
					cap = game.red_cap if game.turn == 'red' else game.blue_cap
					if uid not in [game.red_cap, game.blue_cap]:
						bot.send_message(pid, Message('–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω—ã –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏'))
						continue
					if uid == cap and game.hint_c > 0:
						bot.send_message(pid, Message('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞ —Ö–æ–¥'))
						continue
					if uid != cap:
						game.turn = 'blue' if game.turn == 'red' else 'red'
					info_msg = bot.msg_from_id(game.mid, pid)
					info_msg.set_text(
						'–•–æ–¥: ' + ('—Å–∏–Ω–∏–µ' if (game.turn == 'blue') else '–∫—Ä–∞—Å–Ω—ã–µ') +
						'. –°—á—ë—Ç: üî¥' + str(game.red_score) + ' : ' + str(game.blue_score) + 'üîµ\n' +
						''.join(info_msg.get_text().splitlines(True)[1:]) + '\n' +
						('üî¥' if game.turn == 'red' else 'üîµ') + f'{grs[1]} {grs[2]}: '
					)
					game.hint_c = int(grs[2]) + 1
					bot.commit_edits(info_msg)

			if pid > 2000000000 and game is not None:
				gm.save_game(game)

		elif upd['type'] == 'message_event':
			msg = upd['object']
			pid = msg['peer_id']
			uid = msg['user_id']
			action = msg['payload']['button']
			eid = msg['event_id']
			if 'conversation_message_id' not in msg:
				continue
			answd_msg = bot.msg_from_id(msg['conversation_message_id'], pid)
			game = gm.find_by_pid(pid)
			if action == 'start':
				if not game:
					game = Game(pid)
				game.status = 'dict'
				game.blue_cap = 0
				game.red_cap = 0
				btns = []
				for dict_name in dicts:
					btns.append([[dict_name, dict_name, 'secondary']])
				kb = Keyboard().from_list(btns)
				bot.send_message(pid, Message('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏–≥—Ä—ã:', kb))
				answd_msg.kb.press_btn(0, 0)
				bot.commit_edits(answd_msg)
				bot.send_answer(pid, eid, uid, '–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É')
			elif not game:
				continue
			elif action in dicts:
				if game.status != 'dict':
					bot.send_answer(pid, eid, uid, '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å')
					continue
				bot.send_answer(pid, eid, uid, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + action)
				answd_msg.kb.press_btn(dicts.index(action), 0)
				bot.commit_edits(answd_msg)
				game.status = 'size'
				game.dict = action
				bot.send_message(
					pid,
					Message(
						'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è: ',
						Keyboard().from_list([
							[['–ë–æ–ª—å—à–æ–µ (5—Ö6)', 'big', 'secondary']],
							[['–°—Ä–µ–¥–Ω–µ–µ (5—Ö5)', 'medium', 'secondary']],
							[['–ú–∞–ª–µ–Ω—å–∫–æ–µ (5—Ö4)', 'small', 'secondary']]
						])))
			elif action in ['big', 'medium', 'small']:
				if game.status != 'size':
					bot.send_answer(pid, eid, uid, '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è')
					continue
				if action == 'big':
					n = 0
					counts = [10, 9]
					gray = 10
					rows = 6
					s = '–±–æ–ª—å—à–æ–µ'
				elif action == 'medium':
					n = 1
					counts = [8, 9]
					gray = 7
					rows = 5
					s = '—Å—Ä–µ–¥–Ω–µ–µ'
				else:
					n = 2
					counts = [8, 7]
					gray = 4
					rows = 4
					s = '–º–∞–ª–µ–Ω—å–∫–æ–µ'

				shuffle(counts)
				colors = ['red'] * counts[0] + ['blue'] * counts[1] + ['yellow'] * gray + ['black']
				game.red_score = counts[0]
				game.blue_score = counts[1]
				game.turn = 'red' if counts[0] > counts[1] else 'blue'
				shuffle(colors)
				words = get_random_words(game.dict, 5 * rows)
				btns1 = []
				btns2 = []
				for y in range(rows):
					row1 = list()
					row2 = list()
					for x in range(5):
						i = x + y * 5
						row1.append([words[i], colors[i]])
						row2.append([words[i], 'white'])
					btns1.append([*row1])
					btns2.append([*row2])
				game.cap_f = Field().from_list(btns1)
				game.pl_f = Field().from_list(btns2)

				bot.send_answer(pid, eid, uid, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + s + ' –ø–æ–ª–µ')
				answd_msg.kb.press_btn(n, 0)
				bot.commit_edits(answd_msg)
				kb = Keyboard().from_list([
					[['–•–æ—á—É –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º –∫–∞–ø–∏—Ç–∞–Ω–æ–º', 'red_cap', 'negative'], ['–•–æ—á—É –±—ã—Ç—å —Å–∏–Ω–∏–º –∫–∞–ø–∏—Ç–∞–Ω–æ–º', 'blue_cap', 'primary']]
				])
				bot.send_message(pid, Message(
					'–í—ã–±–∏—Ä–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–æ–≤:\n'
					'‚ö†–í–Ω–∏–º–∞–Ω–∏–µ!‚ö†\n'
					'–£ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏—á–∫–∞ –±–æ—Ç—É, '
					'—á—Ç–æ–±—ã –µ—ë –æ—Ç–∫—Ä—ã—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
					kb
				))
				game.status = 'caps'
				gm.save_game(game)
			elif action in ['red_cap', 'blue_cap']:
				if game.status != 'caps':
					bot.send_answer(pid, eid, uid, '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞')
					continue
				user = bot.api.method(
					'users.get',
					user_ids=uid
				)[0]
				if uid in [game.red_cap, game.blue_cap]:
					bot.send_answer(pid, eid, uid, '–í—ã —É–∂–µ –∫–∞–ø–∏—Ç–∞–Ω')
					continue
				name = user['first_name'] + ' ' + user['last_name']
				if action == 'red_cap':
					game.red_cap = uid
					answd_msg.kb.set_btn(0, 0, [name, 'occupied', 'negative'])
				else:
					game.blue_cap = uid
					answd_msg.kb.set_btn(0, 1, [name, 'occupied', 'primary'])
				bot.commit_edits(answd_msg)
				gm.save_game(game)
				if game.red_cap and game.blue_cap:
					img1 = bot.upload_photo(game.cap_f.get_img(str(pid)))
					img2 = bot.upload_photo(game.pl_f.get_img(str(pid)+'_pl'))
					photo1 = f'photo{img1["owner_id"]}_{img1["id"]}'
					photo2 = f'photo{img2["owner_id"]}_{img2["id"]}'

					message = Message(
						f'–ü–æ–ª–µ –æ—Ç –∏–≥—Ä—ã {game.gid}\n'
						f'–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–æ–º–∞–Ω–¥–µ –ø–∏—à–∏—Ç–µ\n'
						f'{game.gid} [–°–ª–æ–≤–æ] [–∫–æ–ª-–≤–æ]\n'
						f'—Å—é–¥–∞, –∏–ª–∏ \n'
						f'[–°–ª–æ–≤–æ] [–∫–æ–ª-–≤–æ]\n'
						f'–≤ –±–µ—Å–µ–¥—É —Å –∏–≥—Ä–æ–π',
						atts=photo1)
					error = False
					if not bot.send_message(game.red_cap, message):
						bot.send_message(pid, Message('–û—à–∏–±–∫–∞, —É –∫—Ä–∞—Å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞'))
						error = True

					game.rmid = int(message.msg_id)
					if not bot.send_message(game.blue_cap, message):
						bot.send_message(pid, Message('–û—à–∏–±–∫–∞, —É —Å–∏–Ω–µ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞'))
						error = True

					if error:
						kb = Keyboard().from_list([
							[['–•–æ—á—É –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º –∫–∞–ø–∏—Ç–∞–Ω–æ–º', 'red_cap', 'negative'],
							 ['–•–æ—á—É –±—ã—Ç—å —Å–∏–Ω–∏–º –∫–∞–ø–∏—Ç–∞–Ω–æ–º', 'blue_cap', 'primary']]
						])
						bot.send_message(pid, Message(
							'–í—ã–±–∏—Ä–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–æ–≤:\n'
							'‚ö†–í–Ω–∏–º–∞–Ω–∏–µ!‚ö†\n'
							'–£ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏—á–∫–∞ –±–æ—Ç—É, '
							'—á—Ç–æ–±—ã –µ—ë –æ—Ç–∫—Ä—ã—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
							kb
						))
						game.blue_cap = 0
						game.red_cap = 0
						gm.save_game(game)
						continue

					game.bmid = int(message.msg_id)
					message = Message(f'–°–µ–π—á–∞—Å –≤–∞—à —Ö–æ–¥')
					if game.turn == 'red':
						bot.send_message(game.red_cap, message)
					else:
						bot.send_message(game.blue_cap, message)
					bot.send_message(pid, Message(
						f'–ò–≥—Ä–∞: {game.gid}\n'
						f'–°–ª–æ–≤–∞—Ä—å: {game.dict}\n'
						f'[id{game.red_cap}|–ö–∞–ø–∏—Ç–∞–Ω –∫—Ä–∞—Å–Ω—ã—Ö], [id{game.blue_cap}|–ö–∞–ø–∏—Ç–∞–Ω —Å–∏–Ω–∏—Ö]\n'
						f'–ü–µ—Ä–≤—ã–π —Ö–æ–¥: –∫–æ–º–∞–Ω–¥–∞ ' + ('—Å–∏–Ω–∏—Ö' if game.turn == 'blue' else '–∫—Ä–∞—Å–Ω—ã—Ö')
					))
					info_msg = Message(
						'–•–æ–¥: ' + ('—Å–∏–Ω–∏–µ' if (game.turn == 'blue') else '–∫—Ä–∞—Å–Ω—ã–µ') +
						'. –°—á—ë—Ç: üî¥' + str(game.red_score) + ' : ' + str(game.blue_score) + 'üîµ\n' +
						'–ñ—É—Ä–Ω–∞–ª:', atts=photo2)
					bot.send_message(pid, info_msg)
					game.mid = info_msg.msg_id
					game.status = 'progress'
					gm.save_game(game)
			elif action == 'occupied':
				bot.send_answer(pid, eid, uid, '–£ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –µ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–Ω')
			elif action == 'pressed':
				bot.send_answer(pid, eid, uid, '–í—ã —É–∂–µ –Ω–∞–∂–∏–º–∞–ª–∏ —ç—Ç—É –∫–Ω–æ–ø–∫—É')
			if game != None:
				gm.save_game(game)
